<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.admin.mapper.UserMapper">

    <!-- 定义一个resultMap，用于将数据库表的列映射到User实体类的字段 -->
    <resultMap id="UserResultMap" type="com.example.admin.entity.User.User">
        <id column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="company" property="company"/>
        <result column="job" property="job"/>
        <result column="mail" property="mail"/>
        <result column="phone" property="phone"/>
        <result column="approval_date" property="approval_date"/>
        <result column="approver_id" property="approver_id"/>
        <result column="last_login" property="last_login"/>
        <!-- 其他字段 -->
    </resultMap>

    <resultMap id="InvitationCodeResultMap" type="com.example.admin.entity.User.InvitationCode">
        <id column="id" property="id"/>
        <result column="invitation_code_id" property="codeId"/>
        <result column="start_date" property="startDate"/>
        <result column="end_date" property="endDate"/>
        <result column="start_time" property="startTime"/>
        <result column="userid" property="userid"/>
        <result column="approver_id" property="approver_id"/>
    </resultMap>

    <!-- 查询所有用户 DATE_FORMAT(approval_date, '%Y-%m-%d %H:%i:%s') AS approval_date
    resultType="com.example.admin.entity.User.User" -->
    <select id="findAll"  resultMap="UserResultMap">
        SELECT id,name,company,job,mail,phone,DATE_FORMAT(approval_date, '%Y-%m-%d') AS approval_date,approver_id
        FROM expoverse.user
        WHERE deleted = 0
        ORDER BY id DESC;
    </select>

    <!-- 一页20行查询用户 -->
    <select id="findbyNamePage" resultMap="UserResultMap">
        SELECT id,name,company,job,mail,phone,DATE_FORMAT(approval_date, '%Y-%m-%d') AS approval_date,approver_id
        from expoverse.user LIMIT #{limit} OFFSET #{offset};
    </select>

    <!-- 根据ID查询用户 -->
    <select id="findById" parameterType="int" resultMap="UserResultMap">
        SELECT id,name,company,job,mail,phone,DATE_FORMAT(approval_date, '%Y-%m-%d') AS approval_date,approver_id
        from expoverse.user WHERE id = #{id}
    </select>

    <select id="findNamebyId" parameterType="int" resultType="String">
        SELECT name from expoverse.user
        WHERE id= #{id}
    </select>

    <!-- 插入新用户 -->
    <insert id="insert" parameterType="com.example.admin.entity.User.User">
        INSERT INTO expoverse.user (name, company, job, mail, phone, approval_date, approver_id, secret_key)
        VALUES (#{name}, #{company}, #{job}, #{mail}, #{phone}, #{approval_date}, #{approver_id}, UUID())
    </insert>

    <!-- 更新用户信息 -->
    <update id="update" parameterType="com.example.admin.entity.User.User">
        UPDATE expoverse.user
        SET name = #{name}, company = #{company} , job = #{job}, mail= #{mail}, phone= #{phone}
        WHERE id = #{id}
    </update>

    <!-- 根据ID删除用户 -->
    <delete id="delete" parameterType="int">
        DELETE FROM expoverse.user WHERE id = #{id}
    </delete>

    <!-- 查询邀请码 -->
    <select id="findCode" parameterType="String" resultMap="InvitationCodeResultMap">
        SELECT * from expoverse.invitation_codes
        WHERE invitation_code_id= #{code}
    </select>


    <!-- 插入一条用户登录记录,插入后得到 loginid -->
    <insert id="insertlogin" parameterType="com.example.admin.entity.User.Login"
            useGeneratedKeys="true" keyProperty="loginid" keyColumn="loginid">
        INSERT INTO expoverse.login (userid, trigger_timestamp, alive_timestamp)
        VALUES (#{userid},  #{trigger_timestamp}, #{alive_timestamp})
    </insert>

    <!-- 查询-一条用户登录记录, 返回登录ID -->
    <select id="getlogin" parameterType="com.example.admin.entity.User.Login"  resultType="int">
        SELECT loginid FROM expoverse.login
        WHERE userid = #{userid} and trigger_timestamp = #{trigger_timestamp}
    </select>

    <update id="updatealive">
        UPDATE expoverse.login SET alive_timestamp = #{alive_timestamp} WHERE loginid = #{loginid}
    </update>

    <select id="getallLogin" resultType="com.example.admin.entity.User.Login">
        SELECT loginid, userid, trigger_timestamp, alive_timestamp from expoverse.login
    </select>

    <select id="getLatestUser" resultMap="UserResultMap">
        SELECT id,name,company,job,mail,phone,DATE_FORMAT(approval_date, '%Y-%m-%d') AS approval_date,approver_id
        from expoverse.user
        ORDER BY id DESC
        LIMIT 1
    </select>

    <select id="getUserLatestloginid" resultType="int">
        SELECT loginid
        from expoverse.login
        WHERE userid= #{userid}
        ORDER BY loginid DESC
        LIMIT 1
    </select>

    <select id="getUseridByloginid" resultType="int">
        SELECT userid
        from expoverse.login
        WHERE loginid = #{loginid}
    </select>

    <select id="getUserVisitbyDate" resultType="com.example.admin.entity.User.Login">
        SELECT loginid, userid, trigger_timestamp, alive_timestamp
        FROM expoverse.login WHERE trigger_timestamp
        BETWEEN #{startDate} AND #{endDate}
        ORDER BY trigger_timestamp
        ASC;
    </select>

    <select id="getNewUserbyDate" resultMap="UserResultMap">
        SELECT id, name, company, job, mail, phone, approval_date, approver_id
        FROM expoverse.user WHERE approval_date
        BETWEEN #{startday} AND #{endday}
        ORDER BY approval_date
        ASC;
    </select>

    <update id="setLastLogin">
        UPDATE expoverse.user
        SET last_login = #{currentTimestamp}
        WHERE id = #{userid}
    </update>

    <select id="getSurvived"  resultMap="UserResultMap">
        SELECT id, last_login
        FROM expoverse.user
        WHERE deleted = 0
        ORDER BY id DESC;
    </select>

    <update id="setdelete">
        UPDATE expoverse.user
        SET deleted=1
        WHERE id = #{userid}
    </update>

</mapper>